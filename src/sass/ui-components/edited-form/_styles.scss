@mixin generate-edited-form-styles {
  .EditedFormBase {
    box-shadow: 0px calculateRem(4px) calculateRem(16px) rgba(34, 0, 77, 0.12);
    border-radius: calculateRem(8px);
    padding: calculateRem(32px) calculateRem(36px);

    $this: #{&};
    position: relative;

    &--remove-shadow {
      box-shadow: none !important;

      #{$this}--content {
        padding: 0;
      }
    }

    &--custom {
      width: 100%;
      height: auto;
    }

    &--12 {
      width: 100%;
    }

    &--6 {
      width: getEditedFormSizes(edited-form-width) !important;
    }

    &--control {
      @include flex(space-between, center);
      padding: getEditedFormSizes(control-padding);
      width: getEditedFormSizes(control-width);
      height: auto;
      box-sizing: border-box;
      min-height: getEditedFormSizes(control-min-height);
    }

    &--control-title {
      height: getEditedFormSizes(control-title-height);
      font-size: getEditedFormSizes(control-title-font-size);
      font-weight: getEditedFormSizes(control-title-font-weight);
      text-align: left;
      font-family: $base-font-family;
      color: color(black-river);
      word-break: break-all;
      width: getEditedFormSizes(control-title-width);
      @include dots-after-text();
    }

    &--control-tooltip {
      margin-left: calculateRem(5px);
      margin-bottom: calculateRem(-3px);
    }

    &--option-tooltip {
      vertical-align: text-bottom;
      margin-left: calculateRem(4px);
    }

    &--content {
      position: relative;
      @include flex(space-between, null, $flex-wrap: wrap);
      align-content: flex-start;

      padding: getEditedFormSizes(content-padding);
      width: getEditedFormSizes(content-width);
      box-sizing: border-box;
      transition: height getEditedFormSizes(content-transition);
      overflow: hidden;

      &-start-justify {
        justify-content: flex-start;
      }

      form {
        width: 100%;
      }
    }

    &--card-content {
      background-color: getEditedFormColors(content-background-color);
    }

    &--option {
      @include flex(null, flex-start, $direction: column);
      // flex: getEditedFormSizes(option-flex);
      width: calc(getEditedFormSizes(option-width) - calculateRem(12px));
      margin: getEditedFormSizes(option-margin);

      span:last-child {
        border: 1px solid #d0d5dd;
        border-radius: calculateRem(8px);
        width: 100%;
      }

      min-height: getEditedFormSizes(option-height);

      &--full-width {
        width: 100%;
      }

      &--line-translation {
        height: getEditedFormSizes(option-line-translation-height);

        .EditedFormBase {
          &--option-value {
            white-space: break-spaces;
            overflow: inherit;
            width: 100%;
          }
        }
      }

      &--3 {
        width: getEditedFormSizes(option-width--3);
      }

      &--4 {
        width: calc(
          33% - #{getEditedFormSizes(edit-form-field-margin)}
        ) !important;
        width: getEditedFormSizes(option-width--4);
      }

      &--12 {
        width: getEditedFormSizes(option-width--12);
      }

      &--overflow--none {
        height: initial;

        .EditedFormBase--option-value {
          white-space: initial;
          word-break: break-word;
          overflow: initial;
          height: initial;
          width: 100%;
        }
      }
    }

    &--option-hover:hover {
      color: blue;
      cursor: pointer;
      width: 100%;
      text-decoration: underline;
    }

    &--control-button {
      @include flex();
      margin-left: auto;
    }

    &--option-title {
      height: getEditedFormSizes(option-title-height);
      font-size: getEditedFormSizes(option-title-font-size);
      font-weight: 500;
      text-align: left;
      color: getEditedFormColors(option-title-color);
      margin: getEditedFormSizes(option-title-margin);
      word-break: break-all;
      width: getEditedFormSizes(option-title-width);
      @include dots-after-text();
    }

    &--option-value {
      @include flex(null, center);
      padding-left: calculateRem(14px);
      height: getEditedFormSizes(option-value-height);
      font-size: getEditedFormSizes(option-value-font-size);
      text-align: left;
      color: getEditedFormColors(option-value-color);
      word-break: break-all;
      width: getEditedFormSizes(option-title-width);
      @include dots-after-text();
    }

    &--option-hover:hover {
      color: blue;
      cursor: pointer;
      width: 100%;
      text-decoration: underline;
    }

    &--option-value-bold {
      font-weight: getEditedFormSizes(option-value-bold);
    }

    &--viewMore {
      @include flex(center, center);
      position: absolute;
      bottom: 0;
      left: 0;
      border-radius: getEditedFormSizes(edit-form-view-more-borderRadius);
      width: 100%;
      height: getEditedFormSizes(edit-form-view-more-height);
      background: color(satin-white);
      cursor: pointer;

      > div {
        @include flex(center, center);
        color: getEditedFormColors(edit-form-view-colors);
        width: getEditedFormSizes(edit-form-view-icon-width);
        width: getEditedFormSizes(edit-form-view-icon-height);
        transition: getEditedFormSizes(content-transition);
      }

      > span {
        color: getEditedFormColors(edit-form-view-colors);
        font-size: getEditedFormSizes(edit-form-view-font-size);
        height: getEditedFormSizes(edit-form-view-label-height);
      }
    }

    &--option-label {
      flex: 100%;
      margin: getEditedFormSizes(option-label-margin);

      > span {
        color: getEditedFormColors(option-label-color);
        height: getEditedFormSizes(option-title-height);
        font-size: getEditedFormSizes(option-title-font-size);
        font-weight: getEditedFormSizes(option-label-font-weight);
      }
    }

    &--option-tag {
      margin: getEditedFormSizes(option-margin);
      flex: 100%;

      > div {
        @include flex(null, center, $flex-wrap: wrap);

        > div {
          margin: getEditedFormSizes(option-tag-margin);

          > span {
            color: getEditedFormColors(tag-color) !important;
          }
        }
      }
    }

    &--actions-inside {
      position: absolute;
      top: 0;
      right: 0;
    }
  }
}
